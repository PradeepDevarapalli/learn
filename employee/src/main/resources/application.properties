server.port=8084

spring.datasource.url=jdbc:mysql://localhost:3306/employee_directory
spring.datasource.username=springstudent
spring.datasource.password=springstudent

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

# Turn off Spring boot banner
spring.main.banner-mode=off

# Reduce logging level. Set logging level to warn
logging.level.root=warn

# show JPA/Hibernate logging messages
logging.level.org.hibernate.SQL=trace
logging.level.org.hibernate.orm.jdbc.bind=trace

###################################################### kafka Producer properties ######################################################################
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094

# specifies the serializer for message keys (used to determine which topic partition this message should store in).
# Specifies which serializer is used to serialize message key
# Kafka has its own serializer to serialize String to byte array
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# serializer for message value
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# waits for acknowledgement from all brockers
spring.kafka.producer.acks=all

# waits for acknowledgement from only leader (faster but less reliable)
# spring.kafka.producer.acks=1

# doesn't wait for acknowledgement
# spring.kafka.producer.acks=0

# NO. of times th eKafka producer will try to send a msg before making it as failed (default value is 2147483647)
spring.kafka.producer.retries=10

# How long the producer will wait before attempting to retry a failed req (Default value is 100ms)
spring.kafka.producer.properties.retry.backoff.ms=1000

# Recommended to use this property instead of above to make producer wait for max time before raising a timeout exception
# (time to send req + time it waits for akwldgmnt + time spends retrying send)
# defalut value is 120000 - 2 mins
# this property should be >= below 2 properties
spring.kafka.producer.properties.delivery.timeout.ms=120000

# Max time producer will wait and buffer messages before sending them as batch
# Default value is 0 (producer will send message as soon as it receives it without waiting for any messages to arrive)
spring.kafka.producer.properties.linger.ms=0

# The Max time producer will wait for response from broker after sending a message
spring.kafka.producer.properties.request.timeout.ms=3000


############################################    CLI Commands  ######################################################################################################
# command to create replicas with insync replica value
# /bin/kafaka-topics.sh --create --topic topic-name --partitions 3 --replication-factor 3 --bootstrap-server localhost:9092 --config min.insync.replicas=3

# command to list/describe the topic info
# /bin/kafka-topics.sh --describe --bootstrap-server localhost:9092

# command to update replicas to already existing topic
# /bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type topics --entity-name topicName --add-config min-insync.replicas=2

####################################################################################################################################################################



###################################################### kafka Consumer properties ######################################################################
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# consumer grp is a grp of Microservices or grp of kafka consumers that work together to consume messages from a topic
# this prop allows us to define a unique string that identifies consumer grp.
# All MS in same grp will work together to process msgs related to product-created-events
spring.kafka.consumer.group-id=product-created-events

# We specify one or more packages that are considered trusted for deserialization when processing json msgs
spring.kafka.consumer.properties.spring.json.trusted.packages=*


# AWS S3 configuration
access.key.id=<your_aws_access_key_id>
access.key.secret=<your_aws_access_key_secret>
s3.region.name=us-east-1
s3.bucket.name=my-test-s3-bucket-123456